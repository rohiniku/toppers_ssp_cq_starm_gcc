
		TOPPERS/SSPカーネル
		ユーザーズマニュアル

		対応バージョン: Release 1.1.1
		最終更新: 2012年4月17日

このドキュメントは，TOPPERS/SSPカーネルを使用するために必要な事項を説明
するものである．

----------------------------------------------------------------------
     TOPPERS/SSP Kernel
         Smallest Set Profile Kernel
 
     Copyright (C) 2011-2012 by Meika Sugimoto
 
 上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
 ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
     権表示，この利用条件および下記の無保証規定が，そのままの形でソー
     スコード中に含まれていること．
 (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
     用できる形で再配布する場合には，再配布に伴うドキュメント（利用
     者マニュアルなど）に，上記の著作権表示，この利用条件および下記
     の無保証規定を掲載すること．
 (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
     用できない形で再配布する場合には，次のいずれかの条件を満たすこ
     と．
   (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
       作権表示，この利用条件および下記の無保証規定を掲載すること．
   (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
       報告すること．
 (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
     害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
     また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
     由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
     免責すること．
 
 本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
 に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
 アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
 の責任を負わない．
 
----------------------------------------------------------------------

＜重要な注意事項＞

TOPPERS/SSP Release1.1.1は，TOPPERS/SSPについての記述が追加された
TOPPERS統合仕様書1.4.0に準拠していない．TOPPERS統合仕様書との整合性は
次期リリースであるTOPPERS/SSP Release1.2.0で行う予定である．

大きく異なるのは以下の2点である．
・共有スタックの確保方法がTOPPERS統合仕様書ではDEF_STKであるが，
　TOPPERS/SSP Release1.1.1ではDEF_ICSである．

・実行時優先度の指定
　TOPPERS統合仕様書ではDEF_EPRであるが，TOPPERS/SSP Release1.1.1では
　DEF_EPRIである．


○目次

１．TOPPERS/SSPカーネルの概要
	1.1 TOPPERS/SSPカーネルの位置付け
	1.2 TOPPERS/SSPカーネルの仕様
	1.3 既知の問題
２．ターゲット依存部
	2.1 ターゲット依存部の概要
	2.2 簡易パッケージ
	2.3 個別パッケージ
３．クイックスタートガイド
	3.1 開発環境の準備
	3.2 コンフィギュレータの構築
	3.3 サンプルプログラムの構築と実行
	3.4 カーネルを関数単位でライブラリ化する方法
	3.5 アプリケーションとカーネルを別々に構築する方法
４．ディレクトリ構成・ファイル構成
	4.1 配布パッケージのディレクトリ構成
	4.2 ターゲット非依存部のファイル構成
５．コンフィギュレーションスクリプトの使い方
６．Makefileの修正方法
	6.1 Makefileの変数定義
	6.2 コンパイルオプション
７．コンフィギュレータの使い方
８．システムサービス
	8.1 シリアルインタフェースドライバ
		8.1.1 シリアルインタフェースドライバのサービスコール
		8.1.2 シリアルインタフェースドライバのその他のサービス
	8.2 カーネル起動メッセージの出力
９．サポートライブラリ
	9.1 キュー操作ライブラリ関数
１０．使用上の注意とヒント
	10.1 タイマドライバの組込み
	10.2 assertマクロの処理
	10.3 オブジェクトIDの管理
	10.4 カーネルの内部シンボルのリネーム
	10.5 システムの起動時の初期化処理
１１．参考情報
	11.1 利用条件と利用報告
	11.2 保証・適用性・サポート
	11.3 バグレポート
	11.4 ウェブサイト
	11.5 TOPPERSユーザーズメーリングリスト
	11.6 TOPPERSプロジェクトのメンバ向けのサービス
	11.7 TOPPERSプロジェクトへの参加
１２．
	12.1 サービスコール一覧
	12.2 静的API一覧
	12.3 バージョン履歴


１．TOPPERS/SSPカーネルの概要

1.1.  TOPPERS/SSPカーネルの位置付け

TOPPERS/SSPカーネルは，TOPPERS/SSPカーネルの仕様に対して，
小規模アプリケーション向けに仕様を絞ったものである．最小セットに
おける"最小"とは，カーネルが使用するROM/RAM使用量を小さくするために
仕様を最適化することを意味する．

提供する機能はμITRON4.0仕様準拠の最低機能をベースとして，一部
自動車制御用プロファイルの機能を取り込む．

このため，SSPカーネルはSSPカーネルの下位互換でも上位互換でもない．
ただし，制約タスク拡張パッケージを適用した場合，SSPカーネルは
SSPカーネルの上位互換となる．

1.2. TOPPERS/SSPカーネルの仕様

SSPカーネルの仕様の概要については，「TOPPERS新世代カーネル統合仕様書」を
参照及び，original_static_api.txtを参照のこと．

1.3. 既知の問題

kernel_cfg.c（およびcfg1_out.c）は，カーネル，システムサービス，アプリ
ケーションのいずれのインクルードファイルもインクルードし，いずれのシン
ボルも参照する可能性がある．そのため，カーネル，システムサービス，アプ
リケーションでシンボル等が衝突している場合や，コンパイルオプションが食
い違っている場合に，kernel_cfg.c（およびcfg1_out.c）が正しくコンパイル
できなくなる場合が考えられる．カーネルのシンボルをリネームするなどの方
法で軽減されてはいるが，問題がなくなっているわけではない．

システムコンフィギュレーションファイルから，コンフィギュレータに対する
INCLUDEディレクティブにより他のコンフィギュレーションファイルをインクルー
ドしている場合に，その中に含まれるC言語プリプロセッサのインクルードディ
レクティブ（#include）で，コンフィギュレーションファイルの置かれている
ディレクトリが，ファイルを検索するパスにはいらないという問題がある．例
えば，syssvc/syslog.cfgに「#include "syslog.h"」と記述できないのは，こ
の問題があるためである．

現時点では，アドレスが64ビットの環境には対応していない．64ビットアドレ
ス環境をサポートするための最大の課題は，モトローラSレコードフォーマット
が64ビットアドレスに対応していないことである．

２．ターゲット依存部

2.1. ターゲット依存部の概要

SSPカーネルのターゲット非依存部と，各種のターゲットシステムに対応するた
めのターゲット依存部は，別々に開発されている．そのため，SSPカーネルが対
応しているすべてのターゲット依存部を，バージョンを整合させてパッケージ
化することは困難である．そこで，主に初級のユーザを対象にした簡易パッケー
ジと，上級のユーザやカーネル開発者を対象にした個別パッケージを用意して
いる．

SSPカーネルを未サポートのターゲットシステムへポーティングするために必要
な作業は，開発環境の構築と標準の開発環境との差異の吸収，カーネル自身の
ポーティング，システムサービスのポーティングなどからなる．詳しくは，
「ターゲット依存部 ポーティングガイド」を参照すること．

※ ターゲット依存部 ポーティングガイドは現在は未完である

2.2. 簡易パッケージ

簡易パッケージは，SSPカーネルが対応しているターゲットシステム毎に用意さ
れ，そのターゲットシステム上でSSPカーネルを動作させるために必要なファイ
ル一式をパッケージ化したものである．簡易パッケージに含まれるファイルは，
バージョンが整合していることが確認されている．

簡易パッケージのバージョン番号は，パッケージ化した日付とすることを原則
とするが，ターゲットシステム毎の事情によりこの原則に従わない場合がある．

簡易パッケージは，基本的には，次に説明する個別パッケージを複数まとめた
ものである．そのため，対象ターゲットシステムに必要のないファイルも含ま
れている．また，簡易パッケージに含まれている個別パッケージのバージョン
は，個別パッケージのMANIFESTファイルを参照することで知ることができる．

2.3. 個別パッケージ

個別パッケージは，SSPカーネルの開発単位毎に，その開発単位で開発を担当し
ているファイル一式をパッケージ化したものである．SSPカーネルのターゲット
非依存部も，一つの個別パッケージとして配布される．ある個別パッケージを
使用するためには，一般には，他の個別パッケージが必要となる．ターゲット
依存部の個別パッケージを使用するために必要となる個別パッケージとそのバー
ジョンについては，ターゲット依存部のユーザーズマニュアルを参照すること．
使用する個別パッケージのバージョンを整合させることは，ユーザの責任であ
る．

個別パッケージのバージョン番号は，X.Y.Zの形で表現される．ターゲット非依
存部のバージョン番号を，SSPカーネル全体のリリース番号とする．ターゲット
依存部のバージョン番号は，XとYが，それが依存するターゲット非依存部と一
致している．それに対して，Zは一致しているとは限らない．例えば，ターゲッ
ト非依存部のバージョン1.0.0に対応するターゲット依存部は，バージョン
1.1.Zの形となる．ターゲット依存部のみがバージョンアップした場合には，Z
が変更される．

使用する個別パッケージは，次の例のように，ターゲット非依存部の個別パッ
ケージを展開したのと同じディレクトリで展開する．

	% tar xvfz ssp-1.0.0.tar.gz
	% tar xvfz ssp_arch_arm_gcc_1.0.2.tar.gz

ターゲット非依存部の個別パッケージには，以下のターゲット依存部が含まれ
ている．．

	target/cq_starm_gcc	デザインウェーブ誌付属Cortex-M3基板
						（GNU開発環境）用ターゲット依存部
	arch/arm_m_gcc		Cortex-M3（GNU開発環境）用プロセッサ依存部


３．クイックスタートガイド

ここでは，ターゲット依存部が用意されているターゲットシステム上で，SSPカー
ネル上で動作するサンプルプログラムを構築・動作させるまでの手順を示す．

3.1. 開発環境の準備

SSPカーネルを用いたシステム構築には，以下のツールが必要である．

	ホストシステム用のツール
		perl		動作確認：5.10.1
		GNU Make	動作確認：3.81

	TOPPERS新世代カーネル用コンフィギュレータ
		cfg			動作確認：1.7.0
					※ 1.6.0以前のバージョンでは動作しない．

	ターゲットシステム用のツール（クロス開発環境）
		標準規格に準拠したCコンパイラ
		アセンブラ，リンカ，ライブラリアン
		シンボルファイル出力ツール，ヘキサファイル出力ツール
		標準Cライブラリ（必須ではない）

ターゲットシステム用のツールにGNU開発環境を用いる場合には，以下のツール
が必要である．

	ターゲットシステム用のGNU開発環境ツール
		BINUTILS（as，ld，ar，nm，ranlib，objcopy，objdump）
		GCCまたはGCC-CORE（gccおよびそこから呼び出されるツール）
		NEWLIB（標準Cライブラリ，必須ではない）

動作確認されているターゲットシステム用のツールについては，ターゲット依
存部のユーザーズマニュアルを参照すること．

ターゲットシステム用の標準Cライブラリは，アプリケーションが標準Cライブ
ラリを使用しない場合には，必要ない．ただし，コンパイラが標準Cライブラリ
関数（memcpy，memsetなど）を呼び出すコードを生成する場合があり，その場
合には標準Cライブラリが必要である．標準Cライブラリを用意する代わりに，
生成したコードが呼び出す関数のみを自分で用意してもよい．

なお，perlスクリプトはマルチバイト文字を扱う文字コードがEUC，改行コードが
LFであることを仮定している．それ以外の文字コード，改行コードで動作させる
ためにはperlスクリプトの修正が必要となることがある．

以下では，これらのツールが用意できていることを前提に，UNIXマシン上での
構築手順を説明する．また以下の説明では，makeコマンドがGNU Makeであるも
のとする（SSPカーネルのサンプルのMakefileは，GNU Makeの拡張機能を用いて
いる）．

3.2. コンフィギュレータの構築

カーネルを構築する前に，まず，TOPPERS新世代カーネル用コンフィギュレータ
を構築する必要がある．簡易パッケージに含まれていた場合など，コンフィギュ
レータを実行ファイル形式で入手した場合には，このステップは必要ない．

コンフィギュレータの構築には，以下のツールが必要である．

	ホストシステム用のツール（セルフ開発環境）
		C++コンパイラ，C++ライブラリ
					動作確認（Mac OS X環境）：GNU C++ 4.2.1
		Boost		動作確認：1.42.0
		Visual Studio

最初に，パッケージにコンフィギュレータのソースファイルが含まれていない
場合には，コンフィギュレータのパッケージを，SSPカーネルのソースファイル
を展開したディレクトリの下に展開する．

	% cd SSP
	% tar xvfz cfg-1.6.0.tar.gz

または，コンフィギュレータのパッケージを他のディレクトリに展開し，SSPカー
ネルのソースファイルを展開したディレクトリからシンボリックリンクをはっ
てもよい．

ソースファイルが展開できると，cfgディレクトリに移動し，コンフィギュレー
ションスクリプト（configure）でMakefileの環境依存部（Makefile.config）
を生成した後，makeコマンドによりコンフィギュレータ（cfgプログラム）が構
築できる．

	% cd cfg
	% ./configure
	% make

ただし，Boostをインストールしたディレクトリおよび名称が標準で想定してい
るものとは違う場合には，configureの--with-headersおよび--with-libraries
オプションにより，ヘッダファイルおよびライブラリの置かれたディレクトリ
を指定する必要がある．

また，ホストシステムによっては，最適化レベルを上げると正しくコンパイル
できないことが知られている．そのような場合には，最適化レベルを下げるか，
最適化を抑止するように，Makefileを修正する必要がある．

なお，コンフィギュレータの使用方法については，「７．コンフィギュレータ
の使い方」の章で説明する．

3.3. サンプルプログラムの構築と実行

次に，SSPカーネル上で動作するサンプルプログラムを構築する方法を説明する．

まず，サンプルプログラムのオブジェクトファイルを置くディレクトリを作成
し，コンフィギュレーションスクリプトを実行する．例えば，オブジェクトファ
イルを置くディレクトリを，SSPカーネルのソースファイルを展開したディレ
クトリの下のOBJという名称のディレクトリにする場合には，次のコマンドを
実行する（ディレクトリの場所と名称は任意に決めてよい）．

	% cd ssp
	% mkdir OBJ
	% cd OBJ
	% perl ../configure -T <ターゲット略称>

ここで，<ターゲット略称>は，targetディレクトリの下に置かれているターゲッ
ト依存部ディレクトリの名称である．コンフィギュレーションスクリプトのオ
プションについては，「５．コンフィギュレーションスクリプトの使い方」の
章で説明する．

コンフィギュレーションスクリプトの実行により，カレントディレクトリには，
サンプルプログラムを構築するためのMakefile，サンプルプログラム用のコン
フィギュレーションファイル（sample1.cfg），サンプルプログラム本体
（sample1.hおよびsample1.c）が生成される．

コンフィギュレーションスクリプトの実行後，必要であればMakefileを修正す
る．Makefileの修正方法については，「６．Makefileの修正方法」の章で説明
する．

その後，make dependで依存関係ファイル（Makefile.depend）を生成した後，
makeコマンドによりサンプルプログラムのロードモジュール（SSPまたは
SSP.exe）が生成できる．依存関係ファイルの生成には若干時間がかかる．

	% make depend
	% make

ここで構築したサンプルプログラム（sample1.h，sample1.c，sample1.cfg）
は，SSPカーネルの基本的な動作を確認するためのものである．このプログラ
ムの概要説明は，sample1.cの先頭のコメントにある．

3.4. カーネルを関数単位でライブラリ化する方法

前節の手順では，カーネルをファイル単位でコンパイルし，ライブラリ化して
いたが，カーネルのコードサイズを縮小するためには，使用しないサービスコー
ルはリンクしない方が望ましい．そこでSSPカーネルでは，カーネルを関数単位
でコンパイルし，ライブラリ化する方法を用意している．

この方法でサンプルプログラムを構築するには，コンフィギュレーションスク
リプトに，それを指示するオプション（-f）を付加するだけでよい．

	% mkdir OBJ_LIB
	% cd OBJ_LIB
	% perl ../configure -T <ターゲット略称> -f

ここで，OBJ_LIBというディレクトリの場所と名称は，任意に決めてよい．これ
以降の手順は，前節と同じである．

3.5. アプリケーションとカーネルを別々に構築する方法

前節で説明した方法では，アプリケーションとカーネルを同時に生成するため，
オブジェクトファイルを置くディレクトリに非常に多くのファイルが作成され
て，扱いにくくなる．そこで，カーネルを修正する頻度が低い場合には，カー
ネルは事前に構築しておき，後でアプリケーションだけを構築する方法を用意
している．以下では，サンプルプログラムを構築を例に，その手順について説
明する．

まず，カーネルを構築するディレクトリを作成し，コンフィギュレーションス
クリプトを実行する．例えば，カーネルを構築するディレクトリを，SSPカー
ネルのソースファイルを展開したディレクトリの下のKERNEL_LIBという名称の
ディレクトリにする場合には，次のコマンドを実行する（ディレクトリの場所
と名称は任意に決めてよい）．

	% mkdir KERNEL_LIB
	% cd KERNEL_LIB
	% perl ../configure -T <ターゲット略称> -f

これにより，カーネルを構築するディレクトリに，Makefile，sample1.cfg，
sample1.h，sample1.cが生成されるが，Makefile以外は実質的には使用しない．

make dependで依存関係ファイル（Makefile.depend）を生成した後，make
libkernel.aによりカーネルライブラリ（libkernel.a）が生成できる．

	% make depend
	% make libkernel.a

次に，アプリケーションを構築するディレクトリを作成し，コンフィギュレー
ションスクリプトを実行する．例えば，アプリケーションを構築するディレク
トリを，SSPカーネルのソースファイルを展開したディレクトリの下のAPLとい
う名称のディレクトリにする場合には，次のコマンドを実行する（ディレクト
リの場所と名称は任意に決めてよい）．

	% cd ..
	% mkdir APL
	% cd APL
	% perl ../configure -T <ターゲット略称> -L ../KERNEL_LIB

ここで-Lオプションには，カーネルを構築したディレクトリのパスを指定する．

最後に，make dependで依存関係ファイル（Makefile.depend）を生成した後，
makeコマンドによりサンプルプログラムのロードモジュール（SSPまたは
SSP.exe）が生成できる．

	% make depend
	% make

この手順では，アプリケーション構築時にはカーネルの再構築が必要かチェッ
クしないため，カーネルのソースコードを修正した場合には，カーネルを構築
したディレクトリでmake libkernel.aを再実行する必要がある．

以上では，カーネルとアプリケーションを別々のディレクトリで構築したが，
-Lオプションにカレントディレクトリ（ただし，"."という記述では不可）を指
定することで，カーネルとアプリケーションを同じディレクトリで別々に構築
することもできる．具体的には，次の手順となる．

	% mkdir OBJ
	% cd OBJ
	% perl ../configure -T <ターゲット略称> -L ../OBJ
	% make depend
	% make libkernel.a
	% make cleankernel
	% make

ここで，make cleankernelは，カーネルライブラリを生成するための中間ファ
イルを削除するものである．この手順では，make dependによりカーネルライ
ブラリに関する依存関係を生成しないため，カーネルのソースコードを修正し
た場合には，必ずmake cleankernel（または，make clean）してから，make
libkernel.aする必要があるので注意すること．

なお，make realcleanすると，make dependとmakeにより生成したファイルをす
べて削除する．それに対して，make cleanでは，make dependにより生成した依
存関係ファイルは削除しない．


４．ディレクトリ構成・ファイル構成

4.1. 配布パッケージのディレクトリ構成

	include/		アプリケーション向けヘッダファイル
	kernel/			カーネルソースファイル
	syssvc/			システムサービスヘッダファイル，ソースファイル
	target/			ターゲット依存部
	arch/			ターゲット依存部の共通部分
		gcc/		GCC開発環境依存部
	pdic/			PDIC（デバイスドライバのOS非依存部分）
	utils/			ユーティリティプログラム
	sample/			サンプルプログラムとMakefile
	doc/			ドキュメント
	extension/		拡張パッケージ

4.2. ターゲット非依存部のファイル構成

ターゲット非依存部（テストプログラムと拡張パッケージは除く）の各ファイ
ルの概要は次の通り．

	README.txt					TOPPERS/SSPカーネルの簡単な紹介
	configure					コンフィギュレーションスクリプト（GNU開発環境用）
	MANIFEST					個別パッケージのファイルリスト

	include/
		kernel.h				SSPカーネルを使用するための定義
		sil.h					システムインタフェースレイヤを使用するための定義
		t_stddef.h				TOPPERS共通ヘッダファイル
		itron.h					ITRON仕様共通規定のデータ型・定数・マクロ

	kernel/
		Makefile.kernel			カーネルのファイル構成の定義
		kernel_impl.h			カーネル実装用標準ヘッダファイル
		kernel_int.h			kernel_cfg.c用のヘッダファイル
		kernel_rename.def		カーネルの内部識別名のリネーム定義
		kernel_rename.h			カーネルの内部識別名のリネーム
		kernel_unrename.h		カーネルの内部識別名のリネーム解除	
		kernel_api.csv			コンフィギュレータの静的APIテーブル
		kernel_def.csv			コンフィギュレータの値取得シンボルテーブル
		kernel.tf				コンフィギュレータのパス2のテンプレートファイル
		kernel_check.tf			コンフィギュレータのパス3のテンプレートファイル
		allfunc.h				すべての関数をコンパイルするための定義
		check.h					エラーチェック用マクロ
		startup.c				カーネルの初期化と終了処理
		task.h					タスク操作ルーチン関連の定義
		task.c					タスク操作ルーチン
		task_manage.c			タスク管理機能
		sys_manage.c			システム状態管理機能
		interrupt.h				割込み管理機能関連の定義
		interrupt.c				割込み管理機能
		exception.h				CPU例外管理機能関連の定義
		exception.c				CPU例外管理機能
		queue.h					キュー操作ライブラリを使用するための定義

	syssvc/
		banner.h				カーネル起動メッセージの出力のための定義
		banner.c				カーネル起動メッセージの出力
		banner.cfg				カーネル起動メッセージの出力のコンフィギュレー
								ションファイル
		serial.h				シリアルインタフェースドライバを使用するための定義
		serial.c				シリアルインタフェースドライバ
		serial.cfg				シリアルドライバのコンフィギュレーションファイル
		syssvc_def.csv			システムサービスのコンフィギュレーションの際に必要な
								コンフィギュレータの値取得シンボルテーブル

	arch/gcc/
		MANIFEST				個別パッケージのファイルリスト
		tool_stddef.h			t_stddef.hの開発環境依存部（GCC用）

	utils/
		applyrename				ファイルにリネームを適用
		genrename				リネームヘッダファイルの生成
		makedep					依存関係リストの生成（GNU開発環境用）
		makerelease				リリースパッケージの生成

	sample/
		Makefile				サンプルのMakefile（GNU開発環境用）
		sample1.h				サンプルプログラム(1)に関する定義
		sample1.c				サンプルプログラム(1)
		sample1.cfg				サンプルプログラム(1)のコンフィギュレーションファイル

	extension/
		time_event.h			タイムイベント管理関連の定義
		time_event.c			タイムイベント管理
		time_manage.c			システム時刻管理機能
		cyclic.h				周期ハンドラ機能関連の定義
		cyclic.c				周期ハンドラ機能
		alarm.h					アラームハンドラ機能関連の定義
		alarm.c					アラームハンドラ機能
		MANIFEST				拡張パッケージのファイルリスト

	doc/
		user.txt				ユーザーズマニュアル
		ssp_spec.txt			TOPPERS/SSPカーネルの仕様概要
		extension.txt			機能拡張・チューニングガイド
		porting.txt				ターゲット依存部 ポーティングガイド
		original_static_api.txt	TOPPPERS/SSPのAPIのTOPPERS統合仕様書
								との差分箇所の記述
		configurator.txt		コンフィギュレータ仕様
		version.txt				変更履歴


５．コンフィギュレーションスクリプトの使い方

コンフィギュレーションスクリプト（configure）は，SSPカーネルおよびアプ
リケーションプログラムを構築するために必要な基本的なコンフィギュレーショ
ンを行うためのプログラムである．

SSPカーネルを用いてアプリケーションを作成する場合には，まずオブジェクト
ファイルを置くディレクトリを作成し，そのディレクトリでコンフィギュレー
ションスクリプトを実行する．オブジェクトファイルを置くディレクトリの場
所と名称は，任意に決めてよい．

コンフィギュレーションスクリプトに対するオプションは次の通り．

	-T <ターゲット略称>
		ターゲットシステムの名称を，targetディレクトリの下に置かれてい
		るターゲット依存部ディレクトリの名称で指定する（必須）．

	-A <アプリケーションプログラム名>
		アプリケーションプログラムの名称を指定する．省略した場合には，
		サンプルプログラム（sample1）となる．

	-a <アプリケーションのディレクトリ名>
		アプリケーションプログラムのソースファイル（システムコンフィギュ
		レーションファイルを除く）を置いたディレクトリ名を指定する．省
		略した場合には，オブジェクトファイルを置くディレクトリに置かれ
		ていることを仮定する．システムコンフィギュレーションファイルは，
		オブジェクトファイルを置くディレクトリに置くこと．

	-U <オブジェクトファイル名>
		アプリケーションプログラムのメインのオブジェクトファイル（-A 
		で指定したアプリケーションプログラム名に".o"を付加したもの）以
		外に，リンクすべきオブジェクトファイルの名称を，".o"を付加した
		形で指定する．""で囲むことによって，複数のファイルを指定するこ
		とも可能である（-Uオプションを複数使ってはならない）．

	-L <カーネルライブラリのディレクトリ名>
		事前に構築したカーネルライブラリ（libkernel.a）を用いて，アプリ
		ケーションのみを構築する場合には，このオプションにカーネルライ
		ブラリの置かれたディレクトリ名を指定する．このオプションの使用
		例については，「3.5 アプリケーションとカーネルを別々に構築する
		方法」の節を参照すること．

	-f
		カーネルを関数単位でコンパイルしライブラリ化する場合に，このオ
		プションを指定する．このオプションの使用例については，「3.4 カー
		ネルを関数単位でライブラリ化する方法」の節を参照すること．

	-D <SSPカーネルのソースディレクトリ名>
		SSPカーネルのソースファイルを置いたディレクトリ名を指定する．省
		略した場合には，configureの置かれているディレクトリとなる．

	-l <プログラミング言語>
		アプリケーションプログラムのプログラミング言語を指定する．現時
		点では，cとc++のみをサポートしている．

	-t <テンプレートディレクトリ名>
		Makefileやサンプルプログラムのテンプレートの置かれたディレクト
		リ名を指定する．省略した場合には，SSPカーネルのソースファイルを
		置いたディレクトリの下のsampleディレクトリとなる．

	-m <テンプレートMakefile名>
		Makefileのテンプレートとするファイル名を指定する．省略した場合
		には，Makefileとなる．

	-d <実行環境名>
		ターゲットシステム上でのプログラムの実行環境（ないしは，デバッ
		グ環境）の名称を指定する．このオプションを指定すると，実行環境
		を指定するシンボル（TOPPERS_<デバッグ環境名>）がマクロ定義され
		る．省略した場合には，実行環境を指定するシンボルはマクロ定義さ
		れない．

	-r
		トレースログ記録のサンプルコードを有効にする場合に，このオプショ
		ンを指定する．このオプションの使用例については，「11.5 トレース
		ログ記録のサンプルコードの使用方法」の節を参照すること．

	-p <perlのパス名>
		perlのパス名を指定する．省略した場合には，/usr/local/binと
		/usr/binを探索し，perlのパス名を決定する．

	-g <コンフィギュレータのパス名>
		コンフィギュレータ（cfg）のパス名を指定する．省略した場合には，
		デフォルトのパス名（SSPカーネルのソースディレクトリの下の
		cfg/cfg/cfg）となる．

コンフィギュレーションスクリプトが行う処理は次の通りである．

(1) Makefileの生成

テンプレートディレクトリ（デフォルトでは，sample）から適切なMakefileを
選択し，必要な箇所を書き換えて，Makefileを生成する．

(2) サンプルプログラムの生成

指定したアプリケーションプログラムがテンプレートディレクトリにある場合，
適切なアプリケーションプログラムのソースファイルを選択し，必要な箇所を
書き換えて，アプリケーションプログラムのソースファイル（例えば，
sample1.h，sample1.c，sample1.cfg）を生成する．

(3) コンフィギュレータが用意できているかのチェック

コンフィギュレータ（cfg）の実行ファイルがあるかチェックし，ファイルがな
い場合には，その旨を出力する．


６．Makefileの修正方法

前の章で説明したように，コンフィギュレーションスクリプトに与えるオプショ
ン等からMakefileが生成されるが，コンフィギュレーションスクリプトで対応
できない場合には，Makefileを直接修正する必要がある．ここでは，Makefile
の中で，修正が必要となる可能性の高い箇所について説明する．

なお，Makefileを修正した後にコンフィギュレーションスクリプトを再実行す
ると，修正したMakefileが上書きされてしまうので注意すること（古いものが
Makefile.bakに保存される）．

6.1. Makefileの変数定義

(A) ターゲット略称

TARGETには，ターゲットシステムの名称を，targetディレクトリの下に置かれ
ているターゲット依存部ディレクトリの名称で指定する．この定義は，通常は，
コンフィギュレーションスクリプトに対する-Tオプションにより行う．

(B) オブジェクトファイルの拡張子

Cygwin環境でコンパイルする時には，OBJEXTを"exe"に定義する必要がある．こ
れは，Cygwin環境では，ロードモジュールのファイル名に拡張子".exe"が付加
されるのに対応するためのものである．Cygwin環境であることを判定できれば，
コンフィギュレーションスクリプトがこの定義を行う．

(C) 実行環境（ターゲット依存）

ターゲットによっては，実行環境に対応してターゲット依存部のコードを差し
換える場合がある．これを可能にするために，実行環境の名称をDBGENVに定義
している．この定義は，通常は，コンフィギュレーションスクリプトに対す
る-Dオプションにより行う．どのターゲットがどの実行環境に対応しているか
は，ターゲット依存部のユーザーズマニュアルを参照すること．

(D) カーネルライブラリのディレクトリ名

KERNEL_LIBには，カーネルライブラリの置かれたディレクトリ名を定義する．
この定義は，通常は，コンフィギュレーションスクリプトに対する-Lオプショ
ンにより行う．

(E) カーネルを関数単位でコンパイルするかどうか

KERNEL_FUNCOBJSは，カーネルを関数単位でコンパイルする場合にはtrueに定義
し，ファイル単位でコンパイルする場合には未定義とする．この定義は，通常
は，コンフィギュレーションスクリプトに対する-fオプションにより行う．

(F) 共通コンパイルオプション

すべてのプログラムに共通するコンパイルオプションの追加が必要な場合には，
下の変数の定義を変更する．そのコンパイルオプションが，特定のターゲット
で常に必要な場合には，ターゲット依存の定義を入れたMakefile.target等を修
正すべきである．

	CDEFS		コンパイラに対する-Dオプションを記述する．
	INCLUDES	コンパイラに対する-Iオプションを記述する．
	COPTS		コンパイラに対するその他のオプションを記述する．
	LDFLAGS		リンカに対するオプションを記述する．
	LIBS		ライブラリリンクのためのオプションを記述する．

追加の可能性のあるコンパイルオプションについては，「6.2 コンパイルオプ
ション」の節を参照のこと．

(G) アプリケーションプログラム名

APPLNAMEには，アプリケーションプログラム名を定義する．システムコンフィ
ギュレーションファイル名は，APPLNAMEに定義した名前に拡張子".cfg"を付加
した名前とする．また，アプリケーションのメインファイルは，APPLNAMEに定
義した名前に拡張子".c"を付加した名前とする．この定義は，通常は，コンフィ
ギュレーションスクリプトに対する-Aオプションにより行う．

(H) アプリケーションのディレクトリ名

アプリケーションのソースファイルを，オブジェクトファイルを置くのとは別
のディレクトリに置く場合には，APPLDIRにそのディレクトリ名を定義する．こ
の定義は，通常は，コンフィギュレーションスクリプトに対する-aオプション
により行う．アプリケーションのソースファイルを置くディレクトリが複数あ
る場合には，APPL_DIRの定義を変更することで対応する．

(I) アプリケーションのプログラムファイル名

アプリケーションが複数のソースファイルで構成される場合には，そのオブジェ
クトファイル名を，APPL_ASMOBJS，APPL_COBJS，APPL_CXXOBJSに列挙する．

(J) アプリケーションのコンパイルオプション

アプリケーションのコンパイルに必要なコンパイルオプションや，アプリケー
ションがライブラリを必要とする場合には，APPL_CFLAGSおよびAPPL_LIBSに定
義する．

(K) ロードモジュールのファイル名

標準のロードモジュールのファイル名をOBJNAMEに定義する．デフォルトはSSP
である．

(L) ターゲットファイルの定義

ターゲット"all"の依存ファイルとして，ロードモジュールの形式を指定する．
具体的には，ELF形式の時は$(OBJFILE)，バイナリ形式の時は$(OBJNAME).bin，
モトローラ S形式の時は$(OBJNAME).srecを指定する．$(OBJFILE)は，Cygwin
環境でOBJEXTを"exe"に定義した時には$(OBJNAME).exe，そうでない場合には
$(OBJNAME)となる．

(M) makedepのオプションの定義

Cygwin環境でルートディレクトリが"cygdrive"でない場合には，makedepの-Rオ
プションでルートディレクトリ名を与える必要がある．makedepのオプションは，
次の例のように，MAKEDEP_OPTSに定義する．

MAKEDEP_OPTS = -R cygdrive

6.2. コンパイルオプション

SSPカーネルのコード中には，assertマクロが使われている．assertマクロは，
NDEBUGを定義することで，オブジェクトコード中から消すことができる．カー
ネルのデバッグが終了すれば，-DNDEBUGを指定してコンパイルした方が効率が
よくなる．

ターゲット依存部において，コンパイルオプションに-Werror（警告をエラー扱
いする）を指定している場合がある．そのようなターゲットにおいて，アプリ
ケーションで警告が避けられない場合には，ターゲット依存部を修正してコン
パイルオプションを削除する必要がある．


７．コンフィギュレータの使い方

コンフィギュレータ（cfg）は，TOPPERS新世代カーネル統合仕様書の2.12.5節
の記述の通り，3つのパスで構成される．

コンフィギュレータは，システムコンフィギュレーションファイル名をパラメー
タに取り，以下のオプションを持つ（重要なもののみ）．

	--help
		オプションのリストと説明を表示する．

	-v［--version］
		コンフィギュレータのバージョンを表示する．

	-k［--kernel］<カーネル名>
		カーネルの名称を指定する．デフォルトはSSP．

	-p［--pass］<パス番号>
		パス番号を指定する．1〜3のいずれか．

	-I［--include-path］<インクルードパス名>
		INCLUDEディレクティブにおいて，インクルードするコンフィギュレー
		ションファイルを探すパス名を指定する．

	-T［--template-file］<テンプレートファイル名>
		テンプレートファイルの名称を指定する．パス2とパス3で有効．

	--api-table <静的APIテーブルファイル名>
		静的APIテーブルのファイル名を指定する．

	--cfg1-def-table <値取得シンボルテーブルファイル名>
		値取得シンボルテーブルのファイル名を指定する．

	-r［--rom-image］<ロードモジュール名>
		ロードモジュールをSレコードフォーマットの形に変換したファイルの
		名称を指定する．パス3でのみ有効．

	-s [--symbol-table] <シンボルファイル名>
		ロードモジュール中の各シンボルとアドレスの対応表を含むシンボル
		ファイルの名称を指定する．パス3でのみ有効．

	--id-output-file <ID番号出力ファイル名>
		SSPカーネルでは使用してはならない。詳細はconfigurator.txtの
		「○カーネル構成・初期化ファイル（kernel_cfg.c）」の(5)を参照のこと。

	--id-input-file <ID番号入力ファイル名>
		SSPカーネルでは使用してはならない。詳細はconfigurator.txtの
		「○カーネル構成・初期化ファイル（kernel_cfg.c）」の(5)を参照のこと。

	--external-id
		オブジェクトのID番号を保持する変数の定義を生成する．パス2でのみ
		有効．

	-M［--print-dependencies］<ターゲットシンボル>
		システムコンフィギュレーションファイルの依存関係を出力する．
		Makefile中の依存関係を生成する際に用いる．

コンフィギュレータの詳細仕様については，別途PDFファイルの形で配布してい
る「TOPPERS新世代カーネル用コンフィギュレータ仕様」を参照すること．


８．システムサービス


8.1. シリアルインタフェースドライバ

シリアルインタフェースドライバは，シリアルポートを扱うためのドライバで
ある．

シリアルインタフェースドライバは，システムコンフィギュレーションファイ
ルでserial.cfgをインクルードすることで，システムに組み込むことができる．
シリアルインタフェースドライバを呼び出すソースファイルでは，serial.hを
インクルードする．

8.1.1. シリアルインタフェースドライバのサービスコール

シリアルインタフェースドライバを呼び出すサービスコールの仕様は次の通り
である．この中で，シリアルポートのID番号（portid）の解釈はターゲット依
存となる．

これらのサービスコールは，非タスクコンテキストから呼び出すことはできな
い．また，serial_rea_datとserial_wri_datは，ディスパッチ保留状態で呼び
出すことはできない．いずれも，呼び出した場合にはE_CTXエラーとなる．

(1) ER serial_opn_por(ID portid)

portidで指定されたシリアルポートをオープンし，受信／送信が可能な状態に
する．

(2) ER serial_cls_por(ID portid)

portidで指定されたシリアルポートをクローズする．

(3) ER_UINT serial_rea_dat(ID portid, char_t *buf, uint_t len)

portidで指定されたシリアルポートから，lenバイトの文字列を受信し，bufか
らの領域に入れる．lenバイト受信するまで，待ち状態となる．受信した文字数
またはエラーコードを返す．

(4) ER_UINT serial_wri_dat(ID portid, const char_t *buf, uint_t len)

portidで指定されたシリアルポートに，bufからのlenバイトの文字列を送信す
る．lenバイト送信バッファに入れるまで，待ち状態となる．送信した文字数ま
たはエラーコードを返す．

(5) ER serial_ctl_por(ID portid, uint_t ioctl)

portidで指定されたシリアルポートの制御情報を，ioctlで示される値に設定す
る．

ioctlには，以下の制御情報を表す定数を，ビット毎に論理和をとったものを
指定する．

	IOCTL_ECHO（エコーバックモード）
		このビットを設定すると，シリアルインタフェースドライバがエコー
		バックを行う．具体的には，バッファから文字を取り出す度に，その
		文字を書き出す．

	IOCTL_CRLF（改行モード）
		LF（line feed）を書き出すと，CR（carriage return）＋LFに変換し
		て書き出す．


なお，オープン直後のデフォルトの設定値は(IOCTL_ECHO | IOCTL_CRLF)である．

(6) ER serial_ref_por(ID portid, T_SERIAL_RPOR *pk_rpor)


8.1.2. シリアルインタフェースドライバのその他のサービス

シリアルインタフェースドライバは，前記のサービスコールに加えて，初期化
処理と未送信文字の取出し処理を持つ．初期化処理は，カーネルに初期化ルー
チンとして登録する．また，ターゲット依存で，初期化処理，終了処理，割込
みサービスルーチンを持つ．これらの登録処理はserial.cfgに含まれる．

(1) void serial_initialize(intptr_t exinf)

シリアルインタフェースドライバを初期化する．カーネルに初期化ルーチンと
して登録する．exinfは無視する．

(2) bool_t serial_get_chr(ID portid, char_t *p_c)

portidで指定されたシリアルポートの送信バッファ中の文字を，p_cの指す番地
に取り出し，trueを返す関数．文字がなかった時には，falseを返す．終了処理
ルーチン中で呼び出すことを想定している．


8.2. カーネル起動メッセージの出力

カーネル起動メッセージの出力は，カーネルの起動時に，カーネルの名称やバー
ジョン番号，著作権表示などを出力するための機能である．

カーネル起動メッセージの出力は，システムコンフィギュレーションファイル
でbanner.cfgをインクルードすることで，システムに組み込むことができる．

カーネル起動メッセージの出力は，次の関数で構成される．

(1) void print_banner(intptr_t exinf)

システムログ機能を用いて，カーネル起動メッセージを出力する．banner.cfg
によって，カーネルに初期化ルーチンとして登録される．exinfは無視される．


９．サポートライブラリ

サポートライブラリは，アプリケーションやシステムサービスを作成するため
に利用できるライブラリ関数群である．


9.1. キュー操作ライブラリ関数

キュー操作ライブラリは，キューヘッダを含むリング構造のダブルリンクキュー
を扱うライブラリである．キューヘッダの次エントリはキューの先頭のエント
リ，前エントリはキューの末尾のエントリとする．また，キューの先頭のエン
トリの前エントリと，キューの末尾のエントリの次エントリは，キューヘッダ
とする．空のキューは，次エントリ，前エントリとも自分自身を指すキューヘッ
ダであらわす．

キュー操作ライブラリ関数を用いる場合には，queue.hをインクルードする．

キューヘッダとエントリのためのデータ構造として，QUEUE構造体を用いる．
QUEUE構造体の定義は次の通り．QUEUE型の変数は配列として定義することを前提と
している．

	typedef struct
	{
		QUEIDX	next;
		QUEIDX	prev;
	} QUEUE;

QUEIDXはQUEUE型の配列のインデックス値を表すデータ型である．

typedef uint8_t QUEIDX;


キュー操作のために用意している関数は次の通り．

(1) queue_initialize(QUEUE *queue , QUEIDX queue_null)

キューを初期化する．queueにはキューヘッダを，queue_nullには
無効なキューヘッダを示すインデックス値を指定する．

(2) queue_insert_prev(QUEUE *top , QUEIDX queue , QUEIDX entry)

queueで指定するエントリの前に，entryで指定するエントリを挿入する．
topはqueue，entryを含むQUEUE型配列の先頭アドレスである．
queueにキューヘッダを指定した場合には，キューの末尾にp_entryで指定す
るエントリを挿入することになる．

(3) queue_delete_next(QUEUE *top , QUEIDX queue)

queueで指定するエントリの次のエントリを削除し，削除したエントリの
キュー配列中のインデックスを返す．
topはqueue，entryを含むQUEUE型配列の先頭アドレスである．

(6) queue_empty(QUEUE *queue , QUEIDX queue_null)

キューが空の場合にはtrue，そうでない場合にはfalseを返す．queueには
キューヘッダを，queue_nullには無効なキューヘッダを示すインデックス値を
指定する．


１０．使用上の注意とヒント

10.1. タイマドライバの組込み

タイマドライバをシステムに組み込むために，システムコンフィギュレーショ
ンファイルの先頭でtarget_timer.cfgをインクルードする必要がある．

10.2. assertマクロの処理

SSPカーネルのコード中には，assertマクロが使われている．assertマクロの定
義はt_stddef.hに含まれ，assertが失敗した場合の最後の処理（通常は，プロ
グラムを停止させる処理）は，ターゲット依存部のTOPPERS_assert_abortで決
定される．

assertが失敗した場合，システム開発中はデバッガに落とすのが望ましいが，
システム稼働時の対処法は，システムに対する要件に依存する．そこで，ター
ゲット依存部のTOPPERS_assert_abortを，システム要件に合致した適切な処理
に置き換える必要がある．システム要件によっては，NDEBUGを定義してassert
マクロの処理をオブジェクトコード中から消す（「6.2 コンパイルオプション」
の節を参照）方法も考えられる．


10.3. オブジェクトIDの管理

TOPPERS/SSPカーネルでは，オブジェクトのID番号を，コンフィギュレータが割
り付ける方法が基本となっている．

アプリケーションプログラム中でオブジェクトのID番号を参照する場合には，
次の2つの方法が考えられる．

(1) オブジェクト識別名を用いる

オブジェクト生成のための静的API（CRE_YYY）の第1パラメータに記述したオブ
ジェクト識別名を，アプリケーションプログラム中でも用いる方法．

コンフィギュレータは，オブジェクト識別名を，割り付けたID番号にマクロ定
義するC言語プリプロセッサのディレクティブ（#define）をkernel_cfg.hに生
成するため，アプリケーションプログラムからkernel_cfg.hをインクルードす
る必要がある．

この方法は，オブジェクトコード中にID番号が直接埋め込まれるために実行効
率が良い一方で，コンフィギュレータが実行されてkernel_cfg.hが書き換わる
度に，アプリケーションプログラムの再コンパイルが必要になるという欠点が
ある．そのため，アプリケーションプログラムを構成するファイルの中で，一
部のファイルのみでオブジェクト識別名を参照する構成にするといった工夫を
することが望ましい．

(2) オブジェクトのID番号を保持する変数を用いる

オブジェクトのID番号を保持するconst属性を付加した変数を用意し，アプリケー
ションプログラム中では，その変数を用いる方法．

例えば，TASK1というオブジェクト識別名のタスクに対して，次のような変数を
用意する．

const ID TASK1_id = TASK1;

アプリケーションプログラム中では，この変数（TASK1_id）を用いることで，
コンフィギュレータが実行されてkernel_cfg.hが書き換わる度に，上記の変数
定義を含んだファイルのみを再コンパイルすればよいことになる．

この方法は，アプリケーションプログラムの再コンパイルを最小限にできる利
点がある一方で，変数のためのメモリ領域が必要になることに加えて，（プロ
セッサによっては）変数アクセスのためのオーバヘッドが生じるという欠点が
ある．また，定数ではなく変数であることから，他の変数の初期化には使えな
いという制限がある．

なお，TOPPERS/SSPカーネルのコンフィギュレータは，--external-idオプショ
ンを付加することにより，上記の変数定義をkernel_cfg.c中に生成する機能を
持っているので，すべてのオブジェクトIDをこの方法で参照する場合には，こ
の機能を用いることを推奨する．

コンフィギュレータによるID番号割付けのもう1つの課題として，コンフィギュ
レーションファイルの修正により，オブジェクトIDの割付けが変わってしまう
ことが挙げられる．これは，アプリケーションソフトウェアの設計仕様書にID
番号が記載されている場合や，デバッグ作業においてID番号を即値として表示
や確認ができない場合に，作業効率を低下させる可能性が考えられる．

この問題に対応するために，TOPPERS新世代カーネル用コンフィギュレータには，
ID番号の割付け結果をファイルに書き出す機能（--id-output-fileオプション）
と，ID番号の割付けをファイルから取り込む機能（--id-input-fileオプション）
とが用意されている．ただしSSPカーネルの場合，現時点では動作上の問題があり
使用することができない．詳細は configurator.txt の「○カーネル構成・初期
化ファイル（kernel_cfg.c）」の (5) を参照のこと．

10.4. カーネルの内部シンボルのリネーム

SSPカーネルでは，モジュール内部の名称が他のモジュール内部の名称と衝突す
ることを避けるために，カーネルの内部シンボルは，C言語レベルで，先頭が
"_kernel_"または"_KERNEL_"である名称としている．

これをソースコードの可読性と両立させるために，SSPカーネルでは，ソースコー
ドは自然な名前を用いて記述し，C言語プリプロセッサのマクロ定義（#define）
を用いて，それを"_kernel_"または"_KERNEL_"で始まる名前（自然な名前が
yyyyyの場合には，_kernel_yyyyy）にリネームする仕組みを用いている．

具体的には，関連するディレクトリにxxx_rename.defを置き，そこからリネー
ムのためのヘッダファイル（xxx_rename.hおよびxxx_unrename.h）を生成する
ツール（utils/genrename）を用意している．

この仕組みは，ソースコードの可読性向上に役立つ一方で，弊害もある．例え
ば，多くのデバッガで，ソースコード中の名称とオブジェクトコード中の名称
が異なるために，ソースコード中の変数名を指定して値を読んだり，関数名を
指定してブレークポイントを置くといったことができない．

この状況に対応するために，SSPカーネルでは，ソースコード中の該当する名称
をリネームするためのユーティリティ（utils/applyrename）を用意している．
applyrenameユーティリティに，リネーム定義ファイル（xxx_rename.def）のプ
リフィックス（xxxの部分）と，リネームしたいファイルリストを与えると，リ
ネーム処理を行なう．例えば，kernelディレクトリのすべてのファイルに対し
て，カーネルの内部シンボルをリネームするには，次のコマンドを実行すれば
よい．

	% cd kernel
	% ../utils/applyrename kernel *

また，ターゲット依存部のディレクトリのすべてのファイルに対して，カーネ
ルの内部シンボルをリネームするには，次のようなコマンドを実行すればよい．

	% cd target/cq_starm_gcc/
	% ../../utils/applyrename target *
	% ../../utils/applyrename ../../kernel/kernel *

10.5. システムの起動時の初期化処理

システムの起動時にアプリケーションで必要となる初期化処理を行うための機
能として初期化ルーチンが用意されているが，初期化ルーチンが実行されるよ
りも早いタイミングで実行することが必要な初期化処理がある場合がある．

このような場合に用いるために，標準的なスタートアップモジュールから，ター
ゲットシステム依存の初期化フック（hardware_init_hook）を呼び出すことと
している．hardware_init_hookは，カーネルのターゲット依存部で用意されて
いるのが標準であるが，これをアプリケーションで用意したものに置き換え，
その中でアプリケーションで必要となる初期化処理を行うことができる．

ただし，hardware_init_hookの作成する場合には，bssセクションとdataセクショ
ンが初期化されていないことや，ライブラリが初期化されていないこと，C言語
で記述できるとは限らないことなどに注意が必要である．作成にあたっては，
「ターゲット依存部 ポーティングガイド」を参照すること．

カーネルのスタートアップモジュールがhardware_init_hookを呼び出すように
実装されていない場合には，スタートアップモジュールをアプリケーションで
用意したものに置き換える方法を推奨する．

１１．参考情報

11.1. 利用条件と利用報告

SSPカーネルの利用条件は，各ファイルの先頭に表示されている．著作権は，各
ファイルの先頭に表示されている著作権者が保有している．

利用条件の(3)の(b)において，利用の形態をTOPPERSプロジェクトに報告する方
法としては，SSPカーネルを利用した製品の名称と応用分野，製品化した会社名
と業種等の情報を，以下のURLのページから報告するものとする．

	http://www.toppers.jp/report.html

またその際に，SSPカーネルを使用してのコメントやご意見もいただけると幸い
である．

11.2. 保証・適用性・サポート

SSPカーネルは無保証で提供されているものである．開発者およびTOPPERSプロ
ジェクトは，SSPカーネルに関して，特定の使用目的に対する適合性も含めて，
いかなる保証も行わない．また，SSPカーネルの利用により直接的または間接的
に生じたいかなる損害に関しても，その責任を負わない．

開発者およびTOPPERSプロジェクトは，SSPカーネルに関するサポートの約束は
していない．SSPカーネルに関して質問がある場合は，後述のTOPPERSユーザー
ズメーリングリストを利用していただけると幸いである．確実なサポートが必
要な場合には，有償でサポートサービスを提供している会社に相談されたい．

11.3. バグレポート

SSPカーネルにバグや問題点を発見された場合には，後述のTOPPERSユーザーズ
メーリングリストに報告して欲しい．

メーリングリストにバグや問題点などを報告する場合には，必要に応じて次の
情報を知らせて欲しい．

	使用しているカーネルに関する情報
		・ターゲット非依存部のバージョン
		・使用しているターゲット依存部とそのバージョン
		・TOPPERSプロジェクトからのリリースに対する改造箇所（あれば）

	ターゲットシステムに関する情報
		・ターゲットプロセッサの種類
		・ターゲットボード等の種類

	ホストに関する情報
		・OSのバージョン（サービスパックの適用状況も）
		・コンパイラなどの開発環境のバージョン（Cygwinのバージョンも）

11.4. ウェブサイト

TOPPERSプロジェクトのウェブサイトは，以下のURLにある．

	http://www.toppers.jp/

TOPPERSプロジェクトやSSPカーネルに関する最新情報は，このウェブサイトか
ら得ることができる．また，SSPカーネルの最新版は，このウェブサイトからダ
ウンロードすることができる．

11.5. TOPPERSユーザーズメーリングリスト

SSPカーネルを含むTOPPERSプロジェクトの開発成果物のユーザに対する情報提
供およびユーザ相互間の情報交換を容易にするために，TOPPERSユーザーズメー
リングリスト（users@toppers.jp）を用意している．

このメーリングリストには，誰でも自由に登録し，メールを送付することがで
きる（登録者以外はメールを送付できない）．また，送付されたメールは，誰
でも自由にウェブサイトで読むことができる．

メーリングリストへの登録方法については，以下のURLのページに説明がある．

	http://www.toppers.jp/community.html

11.6. TOPPERSプロジェクトのメンバ向けのサービス

TOPPERSプロジェクトのメンバに対しては，上記に加えて，SSPカーネルに関連
して次のサービスを用意している．

(1) TOPPERS開発者メーリングリスト

TOPPERSプロジェクトのメンバは，SSPカーネルに関する質問，バグや問題点な
どの報告に，TOPPERS開発者メーリングリスト（dev@toppers.jp）を利用するこ
とができる．

(2) SSPカーネルの開発支援サイト

SSPカーネルの開発支援のためのTRAC（バグトラッキングシステム）が，以下の
URLにある（TRACへのアクセスには，会員パスワードが必要である）．

	http://dev.toppers.jp/trac/ssp_core

TOPPERSプロジェクトのメンバは，このサイトから，ウェブインタフェースおよ
びsubversionサーバにより，SSPカーネルの開発中のバージョンを得ることがで
きる．また，バグトラッキングデータベースにアクセスすることができ，過去
のバグ履歴へのアクセスや，バグの登録をすることができる．

11.7. TOPPERSプロジェクトへの参加

TOPPERSプロジェクトでは，何からの形でプロジェクトに貢献していただける方，
プロジェクトで開発したソフトウェアをお使いの方，プロジェクトに興味をお
持ちの方の参加を求めている．TOPPERSプロジェクトへの参加方法については，
以下のページに説明がある．

	http://www.toppers.jp/joinus.html


１２．リファレンス

12.1. サービスコール一覧

(1) タスク管理機能

	ER ercd = act_tsk(ID tskid)
	ER ercd = iact_tsk(ID tskid)

(2) システム状態管理機能

	ER ercd = loc_cpu(void)
	ER ercd = iloc_cpu(void)
	ER ercd = unl_cpu(void)
	ER ercd = iunl_cpu(void)
	ER ercd = dis_dsp(void)
	ER ercd = ena_dsp(void)
	bool_t state = sns_ctx(void)
	bool_t state = sns_loc(void)
	bool_t state = sns_dsp(void)
	bool_t state = sns_dpn(void)
	bool_t state = sns_ker(void)
	ER ercd = ext_ker(void)

(3) 割込み管理機能

	ER ercd = dis_int(INTNO intno)
	ER ercd = ena_int(INTNO intno)


12.2. 静的API一覧

(1) タスク管理機能

	CRE_TSK(ID tskid, { ATR tskatr, intptr_t exinf, TASK task,
								PRI itskpri, SIZE stksz, STK_T *stk })
	DEF_EPRI(ID tskid,{ PRI etskpri })

(2) 割込み管理機能

	ATT_ISR({ ATR isratr, intptr_t exinf, INTNO intno, ISR isr, PRI isrpri })
	DEF_INH(INHNO inhno, { ATR inhatr, INTHDR inthdr })
	CFG_INT(INTNO intno, { ATR intatr, PRI intpri })

(3) CPU例外管理機能

	DEF_EXC(EXCNO excno, { ATR excatr, EXCHDR exchdr })

(4) システム構成管理機能

	DEF_ICS({ SIZE istksz, STK_T *istk })
	ATT_INI({ ATR iniatr, intptr_t exinf, INIRTN inirtn })
	ATT_TER({ ATR teratr, intptr_t exinf, TERRTN terrtn })

12.3. バージョン履歴

	2011年 3月31日	Release	1.0.0		早期リリース
	2011年11月16日	Release	1.1.0		最初の一般リリース
	2011年 3月23日	Release	1.1.1		軽微な修正とバグフィックス

以上
